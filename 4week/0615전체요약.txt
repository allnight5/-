4주차 첫 번째
선형회귀
y = wx+b
w는 직선의 기울기 이고 b는 절편으로 직선을 표현하는 식

다중선형회귀

회구와 분류의 차이(선형회구, 릿지회귀, 라쏘회귀 등)
회귀란 성적/점수라는 특정한 수치를 추정하는 방식이며 공부시간/학교와의 거리 등으로 성적을 예측하는 것

(로지스틱회구, SVM, 나이브베이즈 분류기등)
분류는 장르/감정 같은 특정한 범주/클래스를 추정하는 방식으로 줄거리로 장르를 예측하거나
리뷰내용으로 긍정/부정 여부를 예측하는 것이다.

4주차 두 번째
scikit-learn패키지를 ㅎ사용한 선형 회귀분석
LinearRegression.coef_ 가중치값을 출력해볼 수 있다.
LinearRegression.intercept_ 편향(상수값)을 출력한다.
LinearRegression.predict()함수를 이용하여 새로운 입력에 대하여 예측을한다.
import numpy as np
X = np.array([[70,85,11],[71,89,18],[50,80,20],[99,20,10],[50,10,10]]) # 중간, 기말, 가산점
y = np.array([73,82,72,57,34]) # 최종 성적
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X, y)
new_data= [[60,70,80],[71,90,15]]
y_new = lr.predict(new_data)
y_new
lr.coef_[0]*60+lr.coef_[1]*70+lr.coef_[2]*80+lr.intercept_
4주차 세 번째

박스플롯
분위수 3/4 (75%) 25%의 데이터가 이값보다 큼
분위수 2/4 (50%) 중앙값으로 50%의 데이터가 이 갑소다 크거나 작음
분위수 1/4 ( 25) 25%의데이터가 이값보다 값음


#시간대별 대여량 시각화(요일별/주중이나 주말/ 날씨/ 계절)
figure (ax1,ax2,ax3,ax4,ax5) = plt.subplots(nrows=5)
figure.set_size_inches(20,25)

sns.pointplot(data=bike_df, x ='hour', y = 'count', ax=ax1)
sns.pointplot(data=bike_df, x ='hour', y = 'count', hue='workingday', ax=ax2)
sns.pointplot(data=bike_df, x ='hour', y = 'count', hue='dayofweek', ax=ax3)
sns.pointplot(data=bike_df, x ='hour', y = 'count', hue='weather', ax=ax4)
sns.pointplot(data=bike_df, x ='hour', y = 'count', hue='season', ax=ax5)

이렇게 입력하면 한줄씩 되지만
figure((ax1,ax2), (ax3,ax4)) = plt.subplots(nrows=1,ncols=2)
이런식으로 입력하면 행 열로 시각화가 이루어진다.

정규분포는 평균에 많이 모여있고 좌우로 대치 되어있는 것이 정규 분포라고한다.

정규분포화
y_log_transform = np.log1p(bike_df['count'])
y_log_transform.plot(kind='hist',bins=50)
4주차 네 번째
자전거 수요예측 프로젝트
RMSLE(root mean squared log error)
- 예측값 에다가 로그를 취하고,
- 실제값 에다가 로그를 취한 뒤에,
- 둘을 빼서 오차값을 구한 것입니다.
- 그리고 그 오차값을 제곱하고,
- 그 오차값의 제곱이라는 값을 모든 데이터에 대해서 구해서 다 더한 뒤에,
- 데이터 갯수로 나누고 (모든 데이터에 대해서 오차값 제곱의 평균값을 구하는 것이죠!),
- 그 모든 데이터에 대한 오차값 제곱의 평균값에다가 루트를 씌워준 것입니다.

MSE
- 예측값에서 실제값을 빼서 오차값을 구하고,
- 그 오차값을 제곱하고,
- 그 오차값의 제곱이라는 값을 모든 데이터에 대해서 구해서 다 더한 뒤에,
- 데이터 갯수로 나누고 (모든 데이터에 대해서 오차값 제곱의 평균값을 구하는 것이죠!),
- 그 모든 데이터에 대한 오차값 제곱의 평균값에다가 루트를 씌워준 것입니다.

범주형 변수를 더미형 변수로 치환하는 것을 했음.
정확하게 분석하려면 계절이 대여량에 미치는 영향을 분석해줘보다는 봄이, 여름이 대여량에 미치는 영향을 분석해줘 라고 나눠서 분석하는 것이 좀더 정확하게 나올 것이다.

가중치를 시각화한다 == 영향이 가장 많은 것을 찾는다.

sklearn의 선형회귀


4주차 다섯 번째(정규화)
기계는 실제값을 다 알려준다 하더라도 다른 예측값이 나올 수 있어 이것을 과적합 이라고 한다.
(훈련데이터에 집착한 나머지 예측 데이터에대하여 올바르지 못하게 판단하게 되는 것)==과적합

(규제)정규화는 가중치에 대한 제약을 줌으로써 과적합을 해결하는 방식이다.
규제를 줘서 적당한 선을 찾는 것이 정규화의 중요한 부분이다

정규분포화와 규제로선인 정규화는 전혀 다른 의미로 같은 카테고리에도 들어가지 않는다

train['count'].values로 실행시에는 가로로 입력이되지만
train['count'].values.reshape(-1, 1)로 실행시에는 세로로 입력이 된다.
정규화를 통해서 800까지 되던 것을 5 이내로 표현할수 있게된다.
데이터가 많을 때나 범위가 넓다면 StandardScaler을 사용한다면 빠르게 최적화를 하며 빠르게 데이터학습이 가능 할 수 도 있다.
